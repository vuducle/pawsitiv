# docker-compose.prod.yml - Production Environment
version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: pawsitiv-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pawsitiv}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - pawsitiv-network
    restart: always

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pawsitiv-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./container_logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - pawsitiv-network
    restart: always

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: pawsitiv-backend-prod
    expose:
      - "3669"
    environment:
      # Environment
      - NODE_ENV=production

      # Database Configuration
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-pawsitiv}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

      # Server Configuration
      - PORT=3669

      # Security Configuration
      - SESSION_SECRET=${SESSION_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}

      # Production Configuration
      - SEED_DATABASE=false

      # Rate Limiting (strict for production)
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100

      # File Upload
      - MAX_FILE_SIZE=5242880

      # Logging
      - LOG_LEVEL=info
    volumes:
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pawsitiv-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3669/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: ./pawsitiv
      dockerfile: Dockerfile
    container_name: pawsitiv-frontend-prod
    expose:
      - "3000"
    environment:
      - NEXT_PUBLIC_BASE_URL=https://yourdomain.com/api
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_started
    networks:
      - pawsitiv-network
    restart: always

  # Database Seeder (runs once and exits)
  seeder:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: pawsitiv-seeder-prod
    environment:
      # Database Configuration
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-pawsitiv}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

      # Environment
      - NODE_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
    command: ["npm", "run", "db:seed"]
    networks:
      - pawsitiv-network
    profiles:
      - seed

networks:
  pawsitiv-network:
    driver: bridge

volumes:
  postgres_prod_data:
  backend_uploads:
